My Solution Approach 
Let us consider the given test case:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

We are given two sorted arrays nums1 and nums2. The first array nums1 has a total size of m + n, but only the first m elements are valid. The rest are placeholders (zeros). Our task is to merge nums2 into nums1 in sorted order, in-place, and ensure the final array has exactly m + n elements.

To solve this, we follow a simple and effective approach:

Steps
1.Extract the valid portion of nums1:
Since only the first m elements of nums1 are valid, we slice them into a temporary array:

temp = nums1[:m]  # temp = [1, 2, 3]


2.Append elements from nums2:
We then add all elements from nums2 to the temp array:

for num in nums2:
    temp.append(num)
# temp becomes [1, 2, 3, 2, 5, 6]


3.Sort the combined array:
To ensure the result is in non-decreasing order:

temp.sort()
# temp becomes [1, 2, 2, 3, 5, 6]


4.Copy the result back into nums1:
Finally, we overwrite the original nums1 array with the sorted values:


for i in range(m + n):
    nums1[i] = temp[i]
âœ… Conclusion
By following the above steps:

We maintain the final length as m + n.

We ensure the result is in-place within nums1.

We avoid using any extra output array, except for a temporary variable (temp) as allowed.

This is a simple and readable approach that works well for the given problem constraints.


You can check this on my Leetcode too
Leetcode link: https://leetcode.com/problems/merge-sorted-array/?envType=study-plan-v2&envId=top-interview-150